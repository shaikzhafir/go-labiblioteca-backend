// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlcgen

import (
	"context"
)

const countBooks = `-- name: CountBooks :one
SELECT COUNT(*) FROM books
`

func (q *Queries) CountBooks(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countBooks)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id= ?
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, isbn, title, description, author, image_url FROM books
WHERE isbn = ? LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, isbn string) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, isbn)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn,
		&i.Title,
		&i.Description,
		&i.Author,
		&i.ImageUrl,
	)
	return i, err
}

const getBookByID = `-- name: GetBookByID :one
SELECT id, isbn, title, description, author, image_url FROM books
WHERE id = ?
`

func (q *Queries) GetBookByID(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookByID, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn,
		&i.Title,
		&i.Description,
		&i.Author,
		&i.ImageUrl,
	)
	return i, err
}

const getBooksByAuthor = `-- name: GetBooksByAuthor :many
SELECT id, isbn, title, description, author, image_url FROM books
WHERE author = ?
`

func (q *Queries) GetBooksByAuthor(ctx context.Context, author string) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByAuthor, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Isbn,
			&i.Title,
			&i.Description,
			&i.Author,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBook = `-- name: InsertBook :exec
INSERT INTO books (isbn, title, description, author, image_url)
VALUES (?, ?, ?, ?, ?)
`

type InsertBookParams struct {
	Isbn        string
	Title       string
	Description string
	Author      string
	ImageUrl    string
}

func (q *Queries) InsertBook(ctx context.Context, arg InsertBookParams) error {
	_, err := q.db.ExecContext(ctx, insertBook,
		arg.Isbn,
		arg.Title,
		arg.Description,
		arg.Author,
		arg.ImageUrl,
	)
	return err
}

const insertManyBooks = `-- name: InsertManyBooks :exec
INSERT INTO books (isbn, title, description, author, image_url)
VALUES
    (?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?)
`

type InsertManyBooksParams struct {
	Isbn          string
	Title         string
	Description   string
	Author        string
	ImageUrl      string
	Isbn_2        string
	Title_2       string
	Description_2 string
	Author_2      string
	ImageUrl_2    string
	Isbn_3        string
	Title_3       string
	Description_3 string
	Author_3      string
	ImageUrl_3    string
	Isbn_4        string
	Title_4       string
	Description_4 string
	Author_4      string
	ImageUrl_4    string
	Isbn_5        string
	Title_5       string
	Description_5 string
	Author_5      string
	ImageUrl_5    string
}

func (q *Queries) InsertManyBooks(ctx context.Context, arg InsertManyBooksParams) error {
	_, err := q.db.ExecContext(ctx, insertManyBooks,
		arg.Isbn,
		arg.Title,
		arg.Description,
		arg.Author,
		arg.ImageUrl,
		arg.Isbn_2,
		arg.Title_2,
		arg.Description_2,
		arg.Author_2,
		arg.ImageUrl_2,
		arg.Isbn_3,
		arg.Title_3,
		arg.Description_3,
		arg.Author_3,
		arg.ImageUrl_3,
		arg.Isbn_4,
		arg.Title_4,
		arg.Description_4,
		arg.Author_4,
		arg.ImageUrl_4,
		arg.Isbn_5,
		arg.Title_5,
		arg.Description_5,
		arg.Author_5,
		arg.ImageUrl_5,
	)
	return err
}

const listBooks = `-- name: ListBooks :many
SELECT id, isbn, title, description, author, image_url FROM books
ORDER BY author
`

func (q *Queries) ListBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Isbn,
			&i.Title,
			&i.Description,
			&i.Author,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books
SET 
    title = COALESCE(?, title),
    description = COALESCE(?, description),
    author = COALESCE(?, author),
    image_url = COALESCE(?, image_url),
    isbn = COALESCE(?, isbn)
WHERE
    id = ?
`

type UpdateBookParams struct {
	Title       string
	Description string
	Author      string
	ImageUrl    string
	Isbn        string
	ID          int64
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook,
		arg.Title,
		arg.Description,
		arg.Author,
		arg.ImageUrl,
		arg.Isbn,
		arg.ID,
	)
	return err
}
